{"version":3,"sources":["redux/actions.js","components/Filter/Filter.jsx","redux/operations.js","components/Form/Form.jsx","redux/selectors.js","components/ListContacts/ListContacts.jsx","components/Button/Button.jsx","components/login/API.jsx","components/login/slice.jsx","components/login/thunk.jsx","components/UserPage.jsx","utils/routes.js","components/login/components/Registration.jsx","components/login/components/Login.jsx","components/PrivateRoute.jsx","components/PublicRoute.jsx","App.jsx","redux/reducer.js","redux/store.jsx","index.js"],"names":["changeFilter","createAction","Filter","id","uuidv4","dispatch","useDispatch","htmlFor","type","onChange","e","target","value","axios","defaults","baseURL","fetchContacts","createAsyncThunk","_","a","rejectWithValue","get","contacts","data","message","addContact","name","number","post","contact","deleteContact","contactID","delete","connect","onSubmit","obj","useState","setName","setNumber","preventDefault","pattern","title","required","currentTarget","getisLoggedIn","state","user","token","getFilteredContacts","createSelector","filter","entities","normalizedFilter","toLowerCase","includes","onClick","useEffect","useSelector","selectors","length","map","Button","buttonName","disabled","className","ACCOUNT_BASE_URL","loginSlice","createSlice","initialState","email","error","reducers","registerSuccess","action","payload","registerFailure","loginSuccess","loginFailure","logoutSuccess","logoutFailure","actions","TOKEN","headers","common","Authorization","UserPage","then","response","catch","toString","routes","INITIAL_VALUES","passwrod","confirmPassword","Registration","showPassword","setshowPassword","togglePassword","useCallback","prev","validate","values","errors","test","password","handleSubmit","setSubmitting","initialValues","isSubmitting","touched","handleChange","handleBlur","TextField","style","maxWidth","fullWidth","label","onBlur","Boolean","helperText","color","size","variant","Object","keys","to","Login","credentials","console","log","PrivateRoute","Component","component","rest","isLoggedIn","render","props","PublicRoute","App","fallback","Container","path","exact","createReducer","fulfilled","isLoading","pending","rejected","combineReducers","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","userReducer","store","configureStore","reducer","contactsReducer","middleware","getDefaultMiddleware","concat","logger","devTools","process","persistor","persistStore","ReactDOM","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.c80ae1fc.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\"\n\nexport const changeFilter=createAction('contacts/changeFilter')\n\nexport const AddContactRequest=createAction('contacts/AddContactRequest')\nexport const addContactSuccess=createAction('contacts/addContactSuccess')\nexport const addContactError=createAction('contacts/addContactError')\n\nexport const deleteContactRequest=createAction('contacts/deleteContactRequest')\nexport const deleteContactSuccess=createAction('contacts/deleteContactSuccess')\nexport const deleteContactError=createAction('contacts/deleteContactError')","import React from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport {changeFilter} from \"redux/actions\";\r\nimport { useSelector,useDispatch} from \"react-redux\";\r\n\r\nexport default  function Filter (){\r\n  const id = uuidv4();\r\n  const dispatch=useDispatch()\r\n\r\n  return (\r\n    <>\r\n      <label htmlFor={id}>   </label>\r\n      <input id={id}\r\n       type=\"text\"  \r\n       onChange={(e)=>{\r\n         dispatch(changeFilter(e.target.value))\r\n       }} />\r\n    </>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   value: state.contacts.filter,\r\n\r\n// })\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onChange: (e) => dispatch(actions.changeFilter(e.target.value))\r\n// })\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import axios from 'axios';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit'\r\n\r\nconst URL = 'https://connections-api.herokuapp.com';\r\naxios.defaults.baseURL = URL;\r\n\r\n\r\nexport const fetchContacts = createAsyncThunk(\r\n  'contacts/fetchContacts',\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const contacts = await axios.get('/contacts')\r\n      return contacts.data\r\n    } catch (error) {\r\n      return rejectWithValue(error.message)\r\n    }\r\n\r\n  }\r\n)\r\nexport const addContact = createAsyncThunk(\r\n  'contacts/addContact',\r\n  async ({ name, number }, { rejectWithValue }) => {\r\n    try {\r\n      const contact = await axios.post('/contacts', { name, number })\r\n      return contact.data\r\n    } catch (error) {\r\n      return rejectWithValue(error.message)\r\n    }\r\n  })\r\n\r\nexport const deleteContact = createAsyncThunk(\r\n  'contacts/deleteContact',\r\n  async (contactID, { rejectWithValue }) => {\r\n    try {\r\n      const contact = await axios.delete(`contacts/${contactID}`)\r\n      return contactID\r\n    } catch (error) {\r\n      return rejectWithValue(error.message)\r\n    }\r\n  }\r\n)\r\n\r\n// export const deleteContact=contactID=>dispatch=>{\r\n// dispatch(deleteContactRequest())\r\n// axios\r\n// .delete(`contacts/${contactID}`)\r\n// .then(()=>dispatch(deleteContactSuccess(contactID)))\r\n// .catch(error=>dispatch(deleteContactError(error.message)))\r\n// }","import React, { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addContact } from 'redux/operations'\r\n\r\n function Form({ onSubmit }) {\r\n  const [name, setName] = useState('')\r\n  const [number, setNumber] = useState('')\r\n  const handleNameChange = (e) => setName(e.currentTarget.value)\r\n  const handleNumberChange = (e) => setNumber(e.currentTarget.value)\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    onSubmit({ name, number })\r\n    setName('')\r\n    setNumber('')\r\n  }\r\n  return (\r\n    <form type=\"submit\" onSubmit={handleSubmit}>\r\n      <label>\r\n        Name\r\n        <input\r\n          value={name}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={handleNameChange}\r\n        />\r\n      </label>\r\n      <label>\r\n        Number\r\n        <input\r\n          value={number}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={handleNumberChange}\r\n        />\r\n      </label>\r\n      <button type=\"submit\">Add contact</button>\r\n    </form>\r\n  )\r\n}\r\nconst mapDispatchToProrps = (dispatch) => ({\r\n  onSubmit: (obj) => dispatch(addContact(obj)),\r\n})\r\nexport default connect(null, mapDispatchToProrps)(Form)","import { createSelector } from \"reselect\"\r\n\r\nexport const getContacts = ({ contacts }) => contacts.entities\r\nexport const getFilter = ({ filter }) => filter\r\nexport const getisLoggedIn = state=> state.user.token\r\nexport const getToken = getisLoggedIn\r\n\r\nexport const getFilteredContacts = createSelector(\r\n    [getFilter, getContacts],\r\n    (filter, contacts) => {\r\n        if (filter) {\r\n            const normalizedFilter = filter.toLowerCase()\r\n            return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter))\r\n        }\r\n        return contacts\r\n    }\r\n)","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport {fetchContacts, deleteContact} from 'redux/operations'\r\nimport * as selectors from 'redux/selectors'\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nfunction ListContacts({onClick}) {\r\n   const dispatch = useDispatch()\r\n   useEffect(() => {\r\n    dispatch(fetchContacts())\r\n   }, [dispatch])\r\n\r\n   const contacts=useSelector(selectors.getFilteredContacts)\r\n\r\n  return (<ul>\r\n    {contacts.length>0 && contacts.map(({ id, name, number }) => (\r\n      <li key={id}>\r\n        {name} {number}\r\n        <button type=\"button\" id={id} onClick={(e)=>\r\n          onClick(e.target.id)\r\n          }>\r\n          delete\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>)\r\n}\r\n\r\n// ListContacts.propTypes = {\r\n//   contacts: PropTypes.oneOfType([\r\n//     PropTypes.string,\r\n//     PropTypes.number,\r\n//     PropTypes.array,\r\n//   ]),\r\n//   onClick: PropTypes.func.isRequired,\r\n// };\r\n\r\n\r\nconst mapDispatchToProrps = (dispatch) => ({\r\n  onClick: (id) => dispatch(deleteContact(id)),\r\n})\r\nexport default connect(null, mapDispatchToProrps)(ListContacts)\r\n","function Button({ type, onClick, buttonName, disabled }) {\r\n    return (\r\n        <button\r\n            type={type}\r\n            className={disabled}\r\n            onClick={onClick}\r\n            disabled={disabled}\r\n        >{buttonName}</button>\r\n    )\r\n}\r\n\r\nexport {Button}","export const ACCOUNT_BASE_URL = 'https://connections-api.herokuapp.com';","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getisLoggedIn } from \"redux/selectors\";\r\n\r\nexport const INITIAL_STATE = {\r\n    name: \"\",\r\n    email: \"\",\r\n    token:\"\",\r\n    error:\"\",\r\n}\r\n\r\n\r\nexport const loginSlice = createSlice({\r\n    name: \"user\",\r\n    initialState: INITIAL_STATE,\r\n    reducers: {\r\n        registerSuccess: (state, action) => {\r\n            state.name = action.payload.name;\r\n            state.email = action.payload.email;\r\n            state.token = action.payload.token;\r\n        },\r\n        registerFailure: (state, action) => {\r\n            state.error=action.payload.error\r\n        },\r\n        loginSuccess: (state, action) => {\r\n            state.name = action.payload.name;\r\n            state.email = action.payload.email;\r\n            state.token = action.payload.token;\r\n        },\r\n        loginFailure: (state, action) => {\r\n            state.error = action.payload.error\r\n        },\r\n        logoutSuccess: (state, action) => {\r\n            state.user = '';\r\n            state.email = '';\r\n            state.token = '';\r\n            state.error = '';\r\n        },\r\n        logoutFailure: (state, action)=>{},\r\n    }\r\n})\r\n\r\nexport const {\r\n    registerSuccess,\r\n    registerFailure,\r\n    loginSuccess,\r\n    loginFailure,\r\n    logoutSuccess,\r\n    logoutFailure\r\n} = loginSlice.actions\r\n\r\nexport default loginSlice.reducer\r\n\r\n// {\r\n// \"user\": {\r\n//     \"name\": \"djmischa\",\r\n//         \"email\": \"djmischa@mail.com\"\r\n// },\r\n// \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MTZhYWE3MTNkYjY3YTAwMTVmMmM0N2IiLCJpYXQiOjE2MzQzODA0MDF9.JjutbE8YTB6yOpTQUOWvOVybdbGX5ayrb6E7P7mwoyY\"\r\n// }","import axios from \"axios\";\r\nimport { ACCOUNT_BASE_URL } from \"./API\";\r\nimport { getisLoggedIn } from \"redux/selectors\";\r\n\r\nimport {\r\n    registerSuccess,\r\n    registerFailure,\r\n    loginSuccess,\r\n    loginFailure,\r\n    logoutSuccess,\r\n    logoutFailure\r\n} from './slice'\r\n\r\nconst TOKEN = {\r\n    set(token) {\r\n        axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n    },\r\n    unset() {\r\n        axios.defaults.headers.common.Authorization = \"\";\r\n    },\r\n};\r\n\r\n\r\nexport function register(user) {\r\n    return function (dispatch) {\r\n        dispatch({ type: \"REGISTER_REQUEST\" })\r\n\r\n        return axios\r\n            .post(`${ACCOUNT_BASE_URL}/users/signup`, { ...user })\r\n            .then(function (response) {\r\n                const { user: { name, email }, token } = response.data\r\n                TOKEN.set(token);\r\n                dispatch(registerSuccess({ name, email, token }))\r\n            }).catch(function (error) { dispatch(registerFailure({ error: error.toString() })) })\r\n    }\r\n}\r\n\r\nexport function login(credentials) {\r\n    return function (dispatch) {\r\n        dispatch({ type: \"LOGIN_REQUEST\" })\r\n\r\n        return axios\r\n            .post(`${ACCOUNT_BASE_URL}/users/login`, {...credentials})\r\n            .then(function (response) {\r\n                const { user: { name, email }, token } = response.data\r\n                dispatch(loginSuccess({ name, email, token }))\r\n                TOKEN.set(response.data.token);\r\n                console.log(axios.defaults.headers.common.Authorization);\r\n            }).catch(function (error) { dispatch(loginFailure({ error: error.toString() })) })\r\n    }\r\n}\r\n\r\nexport function logout(token) {\r\n    return function (dispatch) {\r\n        dispatch({ type: \"LOGOUT_REQUEST\" })\r\n\r\n        return axios\r\n            .post(`${ACCOUNT_BASE_URL}/users/logout`, token)\r\n            .then(function (response) {\r\n                dispatch(logoutSuccess(response.data))\r\n                TOKEN.unset();\r\n            }).catch(function (error) { dispatch(logoutFailure({ error: error.toString() })) })\r\n    }\r\n}","import Filter from \"./Filter/Filter\";\r\nimport Form from \"./Form/Form\";\r\nimport ListContacts from \"./ListContacts/ListContacts\";\r\nimport { useCallback } from \"react\";\r\nimport { Button } from \"./Button/Button\";\r\nimport { logout } from 'components/login/thunk'\r\nimport { useDispatch } from \"react-redux\";\r\n\r\n\r\n\r\nexport default function UserPage() {\r\n    const dispatch = useDispatch()\r\n    return (\r\n        < div className=\"App\" >\r\n                <h3>Phonebook</h3>\r\n                <Form />\r\n                <Button onClick={() => {\r\n                    dispatch(logout())\r\n                }} buttonName='Logout' />\r\n                <h3>Contacts</h3>\r\n                <p>filter via name</p>\r\n                <Filter />\r\n                <ListContacts />\r\n\r\n        </div >)\r\n}","const routes = {\r\n    home: '/',\r\n    registration: '/registration',\r\n    login: '/login'\r\n}\r\n\r\nexport {routes}","import React, { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport { useCallback } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { routes } from 'utils/routes';\r\nimport { useDispatch } from 'react-redux';\r\nimport { register } from '../thunk';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst INITIAL_VALUES = {\r\n    name: '',\r\n    email: '',\r\n    passwrod: '',\r\n    confirmPassword: '',\r\n}\r\n\r\n\r\nconst Registration = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const [showPassword, setshowPassword] = useState(false)\r\n    const togglePassword = useCallback(() => {\r\n        setshowPassword(prev => !prev)\r\n    }, [])\r\n    const validate = useCallback(\r\n        (values) => {\r\n            const errors = {};\r\n\r\n            if (!values.name) {\r\n                errors.name = 'Required🧐';\r\n            } else if (values.name.length < 2) {\r\n                errors.name = 'Invalid name😢';\r\n            }\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Required🧐';\r\n            } else if (\r\n                !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n            ) {\r\n                errors.email = 'Invalid email address😢';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required🧐';\r\n            } else if (values.password.length < 7 || values.password.length > 15) {\r\n                errors.password = 'Invalid value, password should have  7-15 symbols😉';\r\n            }\r\n\r\n            if (!values.confirmPassword) {\r\n                errors.confirmPassword = 'Required🧐';\r\n            } else if (values.confirmPassword.length < 7 || values.confirmPassword.length > 15) {\r\n                errors.confirmPassword = 'Invalid value, password should have  7-15 symbols😉';\r\n            } else if (values.confirmPassword !== values.password) {\r\n                errors.confirmPassword = 'Passwords do not match😢';\r\n            }\r\n            return errors;\r\n        },\r\n        []\r\n    )\r\n\r\n    const handleSubmit = useCallback(\r\n        (values, { setSubmitting }) => {\r\n            const { name, email, password } = values\r\n            dispatch(register({ name, email, password }))\r\n            setSubmitting(false)\r\n        },\r\n        [dispatch]\r\n    )\r\n\r\n    return (\r\n        < div >\r\n            <h1>Registration Form</h1>\r\n            <Formik\r\n                initialValues={INITIAL_VALUES}\r\n                validate={validate}\r\n                onSubmit={handleSubmit}\r\n            >\r\n                {({ isSubmitting, errors, touched, handleChange, handleBlur, values }) => (\r\n                    <Form>\r\n                        <TextField\r\n                            style={{ maxWidth: \"350px\" }}\r\n                            fullWidth\r\n                            id=\"name\"\r\n                            name=\"name\"\r\n                            label=\"Name\"\r\n                            type=\"name\"\r\n                            value={values.name}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={touched.name && Boolean(errors.name)}\r\n                            helperText={touched.name && errors.name}\r\n                        />\r\n                        <br />\r\n                        <TextField\r\n                            style={{ maxWidth: \"350px\" }}\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            label=\"Email\"\r\n                            type=\"email\"\r\n                            value={values.email}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={touched.email && Boolean(errors.email)}\r\n                            helperText={touched.email && errors.email}\r\n                        />\r\n                        <br />\r\n                        <TextField\r\n                            style={{ maxWidth: \"350px\" }}\r\n                            fullWidth\r\n                            id=\"password\"\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            type={showPassword ? 'text' : 'password'}\r\n                            value={values.password}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={touched.password && Boolean(errors.password)}\r\n                            helperText={touched.password && errors.password}\r\n                        />\r\n                        <br />\r\n                        <br />\r\n                        <TextField\r\n                            style={{ maxWidth: \"350px\" }}\r\n                            fullWidth\r\n                            maxWidth=\"50px\"\r\n                            id=\"password\"\r\n                            name=\"confirmPassword\"\r\n                            label=\"Confirm Password\"\r\n                            type={showPassword ? 'text' : 'password'}\r\n                            value={values.confirmPassword}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={touched.confirmPassword && Boolean(errors.confirmPassword)}\r\n                            helperText={touched.confirmPassword && errors.confirmPassword}\r\n\r\n                        />\r\n                        <Button color=\"success\" size=\"small\" onClick={togglePassword}>{showPassword ? 'Hide password' : 'Show password'}</Button>\r\n                        <br />\r\n                        <br />\r\n                        <Button color=\"primary\" variant=\"contained\" type=\"submit\" disabled={isSubmitting ||\r\n                            !((\r\n                                Object.keys(touched).length ===\r\n                                Object.keys(INITIAL_VALUES).length\r\n                            ) && Object.keys(errors).length === 0)}>\r\n                            Submit\r\n                        </Button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n            <Link to={routes.login}>Have an account? Login here!</Link>\r\n        </div >)\r\n\r\n}\r\n\r\nexport { Registration }","import React, { useCallback, useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport { routes } from 'utils/routes';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { useDispatch } from 'react-redux';\r\nimport { login } from '../thunk';\r\n\r\nconst INITIAL_VALUES = {\r\n    email: '',\r\n    password: ''\r\n}\r\n\r\n\r\nconst Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const [showPassword, setshowPassword] = useState(false)\r\n    const togglePassword = useCallback(() => {\r\n        setshowPassword(prev => !prev)\r\n    }, [])\r\n    const validate = useCallback(\r\n        (values) => {\r\n            const errors = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required🧐';\r\n            } else if (\r\n                !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n            ) {\r\n                errors.email = 'Invalid email address😢';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required🧐';\r\n            } else if (values.password.length < 7 || values.password.length > 15) {\r\n                errors.password = 'Invalid value, password should have  7-15 symbols😉';\r\n            }\r\n            return errors;\r\n        },\r\n        []\r\n    )\r\n\r\n    const handleSubmit = useCallback(\r\n        (values, { setSubmitting }) => {\r\n            const {email, password } = values\r\n            dispatch(login({ email, password }))\r\n            setSubmitting(false)\r\n        },\r\n        [dispatch]\r\n    )\r\n\r\n    return (\r\n        < div >\r\n            <h1>Login Form</h1>\r\n            <Formik\r\n                initialValues={INITIAL_VALUES}\r\n                validate={validate}\r\n                onSubmit={handleSubmit}\r\n            >\r\n                {({\r\n                    values,\r\n                    errors,\r\n                    touched,\r\n                    handleChange,\r\n                    handleBlur,\r\n                    handleSubmit,\r\n                    isSubmitting,\r\n                    /* and other goodies */\r\n                }) => (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <TextField\r\n                            fullWidth\r\n                            style={{ maxWidth: \"350px\" }}\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            label=\"Email\"\r\n                            type=\"email\"\r\n                            value={values.email}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={touched.email && Boolean(errors.email)}\r\n                            helperText={touched.email && errors.email}\r\n                        />\r\n                        <br />\r\n                        <TextField\r\n                            fullWidth\r\n                            style={{ maxWidth: \"350px\" }}\r\n                            id=\"login\"\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            type={showPassword ? 'text' : 'password'}\r\n                            value={values.password}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={touched.password && Boolean(errors.password)}\r\n                            helperText={touched.password && errors.password}\r\n                        />\r\n                        <Button color=\"success\" size=\"small\" onClick={togglePassword}>{showPassword ? 'Hide password' : 'Show password'}</Button>\r\n                        <br />\r\n                        <br />\r\n\r\n                        <Button color=\"primary\" variant=\"contained\"  type=\"submit\" disabled={isSubmitting ||\r\n                            !((\r\n                                Object.keys(touched).length ===\r\n                                Object.keys(INITIAL_VALUES).length\r\n                            ) && Object.keys(errors).length === 0)}>\r\n                            Submit\r\n                        </Button>\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n            <br />\r\n            <Link to={routes.registration}>Do not have account? Register here!</Link>\r\n        </div >)\r\n\r\n}\r\n\r\nexport { Login }","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { getisLoggedIn } from 'redux/selectors';\r\nimport {routes} from 'utils/routes'\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n    const isLoggedIn = useSelector(getisLoggedIn)\r\n    return (\r\n        <Route {...rest} render={props => (\r\n            isLoggedIn ?\r\n                <Component {...props} />\r\n                : <Redirect to={routes.registration} />\r\n        )} />\r\n    );\r\n};\r\n\r\nexport default PrivateRoute;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { getisLoggedIn } from 'redux/selectors';\r\nimport { routes } from 'utils/routes'\r\n\r\nconst PublicRoute = ({ component: Component, ...rest }) => {\r\n    const isLoggedIn = useSelector(getisLoggedIn)\r\n    return (\r\n\r\n        <Route {...rest} render={props => (\r\n            isLoggedIn ?\r\n                <Redirect to={routes.home} />\r\n                : <Component {...props} />\r\n        )} />\r\n    );\r\n};\r\n\r\nexport default PublicRoute;","import \"./App.css\";\r\nimport React, { useState, useEffect, Suspense } from \"react\";\r\nimport UserPage from \"components/UserPage\";\r\nimport { routes } from \"utils/routes\";\r\nimport { Registration } from '../src/components/login/components/Registration'\r\nimport { Login } from '../src/components/login/components/Login'\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport PrivateRoute from \"components/PrivateRoute\";\r\nimport PublicRoute from \"components/PublicRoute\";\r\nimport Container from '@material-ui/core/Container';\r\n\r\nexport default function App() {\r\n  return (\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <Switch>\r\n        <Container maxWidth=\"sm\" className='Container'>\r\n          <PrivateRoute component={UserPage} path={routes.home} exact />\r\n          <PublicRoute path={routes.registration} exact component={Registration} />\r\n          <PublicRoute path={routes.login} exact component={Login} />\r\n        </Container>\r\n      </Switch>\r\n    </Suspense>\r\n\r\n  )\r\n}\r\n\r\n","import { combineReducers } from 'redux'\r\nimport { createReducer } from '@reduxjs/toolkit'\r\nimport { fetchContacts } from './operations'\r\nimport { changeFilter } from './actions'\r\nimport { addContact, deleteContact } from './operations'\r\nimport userReducer from 'components/login/slice'\r\n\r\nconst entities = createReducer([], {\r\n  [fetchContacts.fulfilled]: (_, action) => {\r\n    return action.payload\r\n  },\r\n  [addContact.fulfilled]: (state, { payload }) => [...state, payload],\r\n  [deleteContact.fulfilled]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n})\r\nconst isLoading = createReducer(false, {\r\n  [fetchContacts.pending]: () => true,\r\n  [fetchContacts.fulfilled]: () => false,\r\n  [fetchContacts.rejected]: () => false,\r\n  [addContact.pending]: () => true,\r\n  [addContact.fulfilled]: () => false,\r\n  [addContact.rejected]: () => false,\r\n})\r\n\r\nconst error = createReducer(null, {\r\n  [fetchContacts.rejected]: (_, action) => action.payload,\r\n  [fetchContacts.pending]: () => null,\r\n})\r\nexport const filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n})\r\nexport default combineReducers({\r\n  entities,\r\n  isLoading,\r\n  error,\r\n})\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport contactsReducer, { filter } from './reducer'\r\nimport userReducer from 'components/login/slice'\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport logger from \"redux-logger\";\r\n\r\nconst persistConfig = {\r\n  key: \"auth\",\r\n  storage,\r\n  whitelist: [\"token\"],\r\n};\r\nconst persistedReducer = persistReducer(persistConfig, userReducer);\r\n\r\n const store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n    filter,\r\n     user: persistedReducer\r\n   },\r\n   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\r\n   devTools: process.env.NODE_ENV === \"development\",\r\n})\r\n\r\nconst persistor = persistStore(store);\r\nexport { store, persistor };","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport { Provider } from \"react-redux\";\nimport { store, persistor } from \"./redux/store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={'...'} persistor={persistor}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}