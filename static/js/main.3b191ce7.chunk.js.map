{"version":3,"sources":["redux/actions.js","components/Filter/Filter.jsx","redux/operations.js","components/Form/Form.jsx","redux/selectors.js","components/ListContacts/ListContacts.jsx","components/login/API.jsx","components/login/slice.jsx","components/login/thunk.jsx","components/UserPage.jsx","utils/routes.js","components/login/components/Registration.jsx","components/login/components/Login.jsx","components/PrivateRoute.jsx","components/PublicRoute.jsx","App.jsx","redux/reducer.js","redux/store.jsx","index.js"],"names":["changeFilter","createAction","Filter","id","uuidv4","dispatch","useDispatch","TextField","label","type","onChange","e","target","value","axios","defaults","baseURL","fetchContacts","createAsyncThunk","_","a","rejectWithValue","get","contacts","data","message","addContact","name","number","post","contact","deleteContact","contactID","delete","INITIAL_VALUES","connect","onSubmit","obj","validate","useCallback","values","errors","length","initialValues","setSubmitting","touched","handleChange","handleBlur","handleSubmit","isSubmitting","fullWidth","style","maxWidth","onBlur","error","Boolean","helperText","Button","color","variant","disabled","Object","keys","getisLoggedIn","state","user","token","getFilteredContacts","createSelector","filter","entities","normalizedFilter","toLowerCase","includes","onClick","useEffect","useSelector","selectors","map","ACCOUNT_BASE_URL","loginSlice","createSlice","initialState","email","reducers","registerSuccess","action","payload","registerFailure","loginSuccess","loginFailure","logoutSuccess","logoutFailure","actions","TOKEN","headers","common","Authorization","UserPage","className","then","response","catch","toString","routes","passwrod","confirmPassword","Registration","useState","showPassword","setshowPassword","togglePassword","prev","test","password","size","to","Login","credentials","console","log","PrivateRoute","Component","component","rest","isLoggedIn","render","props","PublicRoute","App","fallback","Container","path","exact","createReducer","fulfilled","isLoading","pending","rejected","combineReducers","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","userReducer","store","configureStore","reducer","contactsReducer","middleware","getDefaultMiddleware","concat","logger","devTools","process","persistor","persistStore","ReactDOM","StrictMode","loading","document","getElementById"],"mappings":"iOAEaA,EAAaC,YAAa,yB,GAERA,YAAa,8BACbA,YAAa,8BACfA,YAAa,4BAERA,YAAa,iCACbA,YAAa,iCACfA,YAAa,+B,eCF7B,SAASC,IACvB,IAAMC,EAAKC,cACLC,EAASC,cAEf,OACE,mCACE,cAACC,EAAA,EAAD,CAAWJ,GAAIA,EACbK,MAAM,kBACPC,KAAK,OACLC,SAAU,SAACC,GACTN,EAASL,EAAaW,EAAEC,OAAOC,a,8CCPtCC,IAAMC,SAASC,QAPL,wCAQL,IAAMC,EAAgBC,YAC3B,yBAD2C,uCAE3C,WAAOC,EAAP,oBAAAC,EAAA,6DAAYC,EAAZ,EAAYA,gBAAZ,kBAE2BP,IAAMQ,IAAI,aAFrC,cAEUC,EAFV,yBAGWA,EAASC,MAHpB,yDAKWH,EAAgB,KAAMI,UALjC,yDAF2C,yDAYhCC,EAAaR,YACxB,sBADwC,uCAExC,qCAAAE,EAAA,6DAASO,EAAT,EAASA,KAAMC,EAAf,EAAeA,OAAYP,EAA3B,EAA2BA,gBAA3B,kBAE0BP,IAAMe,KAAK,YAAa,CAAEF,OAAMC,WAF1D,cAEUE,EAFV,yBAGWA,EAAQN,MAHnB,yDAKWH,EAAgB,KAAMI,UALjC,yDAFwC,yDAW7BM,EAAgBb,YAC3B,yBAD2C,uCAE3C,WAAOc,EAAP,kBAAAZ,EAAA,6DAAoBC,EAApB,EAAoBA,gBAApB,kBAE0BP,IAAMmB,OAAN,mBAAyBD,IAFnD,uCAGWA,GAHX,yDAKWX,EAAgB,KAAMI,UALjC,yDAF2C,yD,iBC1BvCS,EAAiB,CACrBP,KAAM,GACNC,OAAQ,IAwFV,IAGeO,cAAQ,MAHK,SAAC9B,GAAD,MAAe,CACzC+B,SAAU,SAACC,GAAD,OAAShC,EAASqB,EAAWW,QAE1BF,EAxFf,YAA6B,IAAbC,EAAY,EAAZA,SAQPE,GAPUhC,cAOCiC,uBACf,SAACC,GACC,IAAMC,EAAS,GAWf,OAVKD,EAAOb,KAEDa,EAAOb,KAAKe,OAAS,IAC9BD,EAAOd,KAAO,4BAFdc,EAAOd,KAAO,uBAIXa,EAAOZ,QAEDY,EAAOZ,OAAOc,OAAS,GAAKF,EAAOZ,OAAOc,OAAS,MAC5DD,EAAOb,OAAS,+DAFhBa,EAAOb,OAAS,uBAIXa,IAET,KAGH,OACE,cAAC,IAAD,CACEE,cAAeT,EACfI,SAAUA,EACVF,SA3BiB,SAACI,EAAD,GAA+B,EAApBI,cAAqB,IAC3CjB,EAAiBa,EAAjBb,KAAMC,EAAWY,EAAXZ,OACdQ,EAAS,CAAET,OAAMC,YAsBjB,SAKG,gBACCY,EADD,EACCA,OACAC,EAFD,EAECA,OACAI,EAHD,EAGCA,QACAC,EAJD,EAICA,aACAC,EALD,EAKCA,WACAC,EAND,EAMCA,aACAC,EAPD,EAOCA,aAPD,OAUC,uBAAMb,SAAUY,EAAhB,UACE,cAACzC,EAAA,EAAD,CACE2C,WAAS,EACTC,MAAO,CAAEC,SAAU,SACnBjD,GAAG,OACHwB,KAAK,OACLnB,MAAM,OACNC,KAAK,OACLI,MAAO2B,EAAOb,KACdjB,SAAUoC,EACVO,OAAQN,EACRO,MAAOT,EAAQlB,MAAQ4B,QAAQd,EAAOd,MACtC6B,WAAYX,EAAQlB,MAAQc,EAAOd,OAErC,uBACA,cAACpB,EAAA,EAAD,CACE2C,WAAS,EACTC,MAAO,CAAEC,SAAU,SACnBjD,GAAG,QACHwB,KAAK,SACLnB,MAAM,SACNC,KAAK,SACLI,MAAO2B,EAAOZ,OACdlB,SAAUoC,EACVO,OAAQN,EACRO,MAAOT,EAAQjB,QAAU2B,QAAQd,EAAOb,QACxC4B,WAAYX,EAAQjB,QAAUa,EAAOb,SAEvC,uBACA,uBAEA,cAAC6B,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAYlD,KAAK,SAASmD,SAAUX,KAEhEY,OAAOC,KAAKjB,GAASH,SACrBmB,OAAOC,KAAK5B,GAAgBQ,QACM,IAA/BmB,OAAOC,KAAKrB,GAAQC,QAJ3B,kC,QCnFGqB,EAAgB,SAAAC,GAAK,OAAGA,EAAMC,KAAKC,OAGnCC,EAAsBC,YAC/B,CALqB,SAAC,GAAD,SAAGC,QADD,SAAC,GAAD,SAAG9C,SAAwB+C,YAOlD,SAACD,EAAQ9C,GACL,GAAI8C,EAAQ,CACR,IAAME,EAAmBF,EAAOG,cAChC,OAAOjD,EAAS8C,QAAO,SAAAvC,GAAO,OAAIA,EAAQH,KAAK6C,cAAcC,SAASF,MAE1E,OAAOhD,KC0Bf,IAGeY,cAAQ,MAHK,SAAC9B,GAAD,MAAe,CACzCqE,QAAS,SAACvE,GAAD,OAAQE,EAAS0B,EAAc5B,QAE3BgC,EAnCf,YAAkC,IAAXuC,EAAU,EAAVA,QACdrE,EAAWC,cACjBqE,qBAAU,WACTtE,EAASY,OACP,CAACZ,IAEJ,IAAMkB,EAASqD,YAAYC,GAE5B,OAAQ,6BACLtD,EAASmB,OAAO,GAAKnB,EAASuD,KAAI,gBAAG3E,EAAH,EAAGA,GAAIwB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACjC,+BACGD,EADH,IACUC,EACR,wBAAQnB,KAAK,SAASN,GAAIA,EAAIuE,QAAS,SAAC/D,GAAD,OACrC+D,EAAQ/D,EAAEC,OAAOT,KADnB,sBAFOA,W,QClBF4E,EAAmB,wCCWnBC,EAAaC,YAAY,CAClCtD,KAAM,OACNuD,aAVyB,CACzBvD,KAAM,GACNwD,MAAO,GACPjB,MAAM,GACNZ,MAAM,IAON8B,SAAU,CACNC,gBAAiB,SAACrB,EAAOsB,GACrBtB,EAAMrC,KAAO2D,EAAOC,QAAQ5D,KAC5BqC,EAAMmB,MAAQG,EAAOC,QAAQJ,MAC7BnB,EAAME,MAAQoB,EAAOC,QAAQrB,OAEjCsB,gBAAiB,SAACxB,EAAOsB,GACrBtB,EAAMV,MAAMgC,EAAOC,QAAQjC,OAE/BmC,aAAc,SAACzB,EAAOsB,GAClBtB,EAAMrC,KAAO2D,EAAOC,QAAQ5D,KAC5BqC,EAAMmB,MAAQG,EAAOC,QAAQJ,MAC7BnB,EAAME,MAAQoB,EAAOC,QAAQrB,OAEjCwB,aAAc,SAAC1B,EAAOsB,GAClBtB,EAAMV,MAAQgC,EAAOC,QAAQjC,OAEjCqC,cAAe,SAAC3B,EAAOsB,GACnBtB,EAAMC,KAAO,GACbD,EAAMmB,MAAQ,GACdnB,EAAME,MAAQ,GACdF,EAAMV,MAAQ,IAElBsC,cAAe,SAAC5B,EAAOsB,QAIxB,EAOHN,EAAWa,QANXR,EADG,EACHA,gBACAG,EAFG,EAEHA,gBACAC,EAHG,EAGHA,aACAC,EAJG,EAIHA,aACAC,EALG,EAKHA,cACAC,EANG,EAMHA,cAGWZ,IAAf,QCrCMc,EAAQ,SACN5B,GACApD,IAAMC,SAASgF,QAAQC,OAAOC,cAA9B,iBAAwD/B,IAF1D4B,EAAQ,WAKNhF,IAAMC,SAASgF,QAAQC,OAAOC,cAAgB,ICRvC,SAASC,IACpB,IAAM7F,EAAWC,cACjB,OACI,sBAAM6F,UAAU,MAAhB,UACI,2CACA,cAAC,EAAD,IACA,cAAC1C,EAAA,EAAD,CAAQE,QAAQ,WAAWD,MAAM,MAAMgB,QAAS,WDoCrD,IAAgBR,ECnCP7D,GDoCL,SAAUA,GAGb,OAFAA,EAAS,CAAEI,KAAM,mBAEVK,IACFe,KADE,UACMkD,EADN,iBACuCb,GACzCkC,MAAK,SAAUC,GACZhG,EAASsF,EAAcU,EAAS7E,OAChCsE,OACDQ,OAAM,SAAUhD,GAASjD,EAASuF,EAAc,CAAEtC,MAAOA,EAAMiD,qBC7ClE,oBAGA,uBACA,cAACrG,EAAD,IACA,0CACA,cAAC,EAAD,OCtBZ,IAAMsG,EACI,8BADJA,EAEY,gBAFZA,EAGK,S,gBCOLtE,EAAiB,CACnBP,KAAM,GACNwD,MAAO,GACPsB,SAAU,GACVC,gBAAiB,IAIfC,EAAe,WACjB,IAAMtG,EAAWC,cAEjB,EAAwCsG,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAiBxE,uBAAY,WAC/BuE,GAAgB,SAAAE,GAAI,OAAKA,OAC1B,IACG1E,EAAWC,uBACb,SAACC,GACG,IAAMC,EAAS,GA6Bf,OA3BKD,EAAOb,KAEDa,EAAOb,KAAKe,OAAS,IAC5BD,EAAOd,KAAO,4BAFdc,EAAOd,KAAO,uBAKba,EAAO2C,MAGP,2CAA2C8B,KAAKzE,EAAO2C,SAExD1C,EAAO0C,MAAQ,qCAJf1C,EAAO0C,MAAQ,uBAOd3C,EAAO0E,UAED1E,EAAO0E,SAASxE,OAAS,GAAKF,EAAO0E,SAASxE,OAAS,MAC9DD,EAAOyE,SAAW,iEAFlBzE,EAAOyE,SAAW,uBAKjB1E,EAAOkE,gBAEDlE,EAAOkE,gBAAgBhE,OAAS,GAAKF,EAAOkE,gBAAgBhE,OAAS,GAC5ED,EAAOiE,gBAAkB,gEAClBlE,EAAOkE,kBAAoBlE,EAAO0E,WACzCzE,EAAOiE,gBAAkB,sCAJzBjE,EAAOiE,gBAAkB,uBAMtBjE,IAEX,IAGEO,EAAeT,uBACjB,SAACC,EAAD,GAAgC,IHvCfyB,EGuCNrB,EAAoB,EAApBA,cACCjB,EAA0Ba,EAA1Bb,KAAMwD,EAAoB3C,EAApB2C,MAAO+B,EAAa1E,EAAb0E,SACrB7G,GHzCa4D,EGyCK,CAAEtC,OAAMwD,QAAO+B,YHxClC,SAAU7G,GAGb,OAFAA,EAAS,CAAEI,KAAM,qBAEVK,IACFe,KADE,UACMkD,EADN,gCAC4Cd,IAC9CmC,MAAK,SAAUC,GACZ,MAAyCA,EAAS7E,KAAlD,IAAQyC,KAAQtC,EAAhB,EAAgBA,KAAMwD,EAAtB,EAAsBA,MAASjB,EAA/B,EAA+BA,MAC/B4B,EAAU5B,GACV7D,EAASgF,EAAgB,CAAE1D,OAAMwD,QAAOjB,cACzCoC,OAAM,SAAUhD,GAASjD,EAASmF,EAAgB,CAAElC,MAAOA,EAAMiD,oBGgCpE3D,GAAc,KAElB,CAACvC,IAGL,OACI,gCACI,mDACA,cAAC,IAAD,CACIsC,cAAeT,EACfI,SAAUA,EACVF,SAAUY,EAHd,SAKK,gBAAGC,EAAH,EAAGA,aAAcR,EAAjB,EAAiBA,OAAQI,EAAzB,EAAyBA,QAASC,EAAlC,EAAkCA,aAAcC,EAAhD,EAAgDA,WAAYP,EAA5D,EAA4DA,OAA5D,OACG,eAAC,IAAD,WACI,cAACjC,EAAA,EAAD,CACI4C,MAAO,CAAEC,SAAU,SACnBF,WAAS,EACT/C,GAAG,OACHwB,KAAK,OACLnB,MAAM,OACNC,KAAK,OACLI,MAAO2B,EAAOb,KACdjB,SAAUoC,EACVO,OAAQN,EACRO,MAAOT,EAAQlB,MAAQ4B,QAAQd,EAAOd,MACtC6B,WAAYX,EAAQlB,MAAQc,EAAOd,OAEvC,uBACA,cAACpB,EAAA,EAAD,CACI4C,MAAO,CAAEC,SAAU,SACnBF,WAAS,EACT/C,GAAG,QACHwB,KAAK,QACLnB,MAAM,QACNC,KAAK,QACLI,MAAO2B,EAAO2C,MACdzE,SAAUoC,EACVO,OAAQN,EACRO,MAAOT,EAAQsC,OAAS5B,QAAQd,EAAO0C,OACvC3B,WAAYX,EAAQsC,OAAS1C,EAAO0C,QAExC,uBACA,cAAC5E,EAAA,EAAD,CACI4C,MAAO,CAAEC,SAAU,SACnBF,WAAS,EACT/C,GAAG,WACHwB,KAAK,WACLnB,MAAM,WACNC,KAAMoG,EAAe,OAAS,WAC9BhG,MAAO2B,EAAO0E,SACdxG,SAAUoC,EACVO,OAAQN,EACRO,MAAOT,EAAQqE,UAAY3D,QAAQd,EAAOyE,UAC1C1D,WAAYX,EAAQqE,UAAYzE,EAAOyE,WAE3C,uBACA,uBACA,cAAC3G,EAAA,EAAD,CACI4C,MAAO,CAAEC,SAAU,SACnBF,WAAS,EACTE,SAAS,OACTjD,GAAG,WACHwB,KAAK,kBACLnB,MAAM,mBACNC,KAAMoG,EAAe,OAAS,WAC9BhG,MAAO2B,EAAOkE,gBACdhG,SAAUoC,EACVO,OAAQN,EACRO,MAAOT,EAAQ6D,iBAAmBnD,QAAQd,EAAOiE,iBACjDlD,WAAYX,EAAQ6D,iBAAmBjE,EAAOiE,kBAGlD,cAACjD,EAAA,EAAD,CAAQC,MAAM,UAAUyD,KAAK,QAAQzC,QAASqC,EAA9C,SAA+DF,EAAe,gBAAkB,kBAChG,uBACA,uBACA,cAACpD,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAYlD,KAAK,SAASmD,SAAUX,KAE5DY,OAAOC,KAAKjB,GAASH,SACrBmB,OAAOC,KAAK5B,GAAgBQ,QACI,IAA/BmB,OAAOC,KAAKrB,GAAQC,QAJ7B,0BAUZ,cAAC,IAAD,CAAM0E,GAAIZ,EAAV,8CC9INtE,EAAiB,CACnBiD,MAAO,GACP+B,SAAU,IAIRG,EAAQ,WACV,IAAMhH,EAAWC,cAEjB,EAAwCsG,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAiBxE,uBAAY,WAC/BuE,GAAgB,SAAAE,GAAI,OAAKA,OAC1B,IACG1E,EAAWC,uBACb,SAACC,GACG,IAAMC,EAAS,GAcf,OAbKD,EAAO2C,MAGP,2CAA2C8B,KAAKzE,EAAO2C,SAExD1C,EAAO0C,MAAQ,qCAJf1C,EAAO0C,MAAQ,uBAOd3C,EAAO0E,UAED1E,EAAO0E,SAASxE,OAAS,GAAKF,EAAO0E,SAASxE,OAAS,MAC9DD,EAAOyE,SAAW,iEAFlBzE,EAAOyE,SAAW,uBAIfzE,IAEX,IAGEO,EAAeT,uBACjB,SAACC,EAAD,GAAgC,IJPlB8E,EIOH1E,EAAoB,EAApBA,cACAuC,EAAoB3C,EAApB2C,MAAO+B,EAAa1E,EAAb0E,SACd7G,GJTUiH,EISK,CAAEnC,QAAO+B,YJRzB,SAAU7G,GAGb,OAFAA,EAAS,CAAEI,KAAM,kBAEVK,IACFe,KADE,UACMkD,EADN,+BAC0CuC,IAC5ClB,MAAK,SAAUC,GACZ,MAAyCA,EAAS7E,KAAlD,IAAQyC,KAAQtC,EAAhB,EAAgBA,KAAMwD,EAAtB,EAAsBA,MAASjB,EAA/B,EAA+BA,MAC/B7D,EAASoF,EAAa,CAAE9D,OAAMwD,QAAOjB,WACrC4B,EAAUO,EAAS7E,KAAK0C,OACxBqD,QAAQC,IAAI1G,IAAMC,SAASgF,QAAQC,OAAOC,kBAC3CK,OAAM,SAAUhD,GAASjD,EAASqF,EAAa,CAAEpC,MAAOA,EAAMiD,oBIDjE3D,GAAc,KAElB,CAACvC,IAGL,OACI,gCACI,4CACA,cAAC,IAAD,CACIsC,cAAeT,EACfI,SAAUA,EACVF,SAAUY,EAHd,SAKK,gBACGR,EADH,EACGA,OACAC,EAFH,EAEGA,OACAI,EAHH,EAGGA,QACAC,EAJH,EAIGA,aACAC,EALH,EAKGA,WACAC,EANH,EAMGA,aACAC,EAPH,EAOGA,aAPH,OAUG,uBAAMb,SAAUY,EAAhB,UACI,cAACzC,EAAA,EAAD,CACI2C,WAAS,EACTC,MAAO,CAAEC,SAAU,SACnBjD,GAAG,QACHwB,KAAK,QACLnB,MAAM,QACNC,KAAK,QACLI,MAAO2B,EAAO2C,MACdzE,SAAUoC,EACVO,OAAQN,EACRO,MAAOT,EAAQsC,OAAS5B,QAAQd,EAAO0C,OACvC3B,WAAYX,EAAQsC,OAAS1C,EAAO0C,QAExC,uBACA,cAAC5E,EAAA,EAAD,CACI2C,WAAS,EACTC,MAAO,CAAEC,SAAU,SACnBjD,GAAG,QACHwB,KAAK,WACLnB,MAAM,WACNC,KAAMoG,EAAe,OAAS,WAC9BhG,MAAO2B,EAAO0E,SACdxG,SAAUoC,EACVO,OAAQN,EACRO,MAAOT,EAAQqE,UAAY3D,QAAQd,EAAOyE,UAC1C1D,WAAYX,EAAQqE,UAAYzE,EAAOyE,WAE3C,cAACzD,EAAA,EAAD,CAAQC,MAAM,UAAUyD,KAAK,QAAQzC,QAASqC,EAA9C,SAA+DF,EAAe,gBAAkB,kBAChG,uBACA,uBAEA,cAACpD,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAalD,KAAK,SAASmD,SAAUX,KAE7DY,OAAOC,KAAKjB,GAASH,SACrBmB,OAAOC,KAAK5B,GAAgBQ,QACI,IAA/BmB,OAAOC,KAAKrB,GAAQC,QAJ7B,0BAUZ,uBACA,cAAC,IAAD,CAAM0E,GAAIZ,EAAV,qD,kCChGGiB,GAXM,SAAC,GAAuC,IAA1BC,EAAyB,EAApCC,UAAyBC,EAAW,mBAClDC,EAAajD,YAAYb,GAC/B,OACI,cAAC,IAAD,2BAAW6D,GAAX,IAAiBE,OAAQ,SAAAC,GAAK,OAC1BF,EACI,cAACH,EAAD,eAAeK,IACb,cAAC,IAAD,CAAUX,GAAIZ,S,iBCMjBwB,GAZK,SAAC,GAAuC,IAA1BN,EAAyB,EAApCC,UAAyBC,EAAW,mBACjDC,EAAajD,YAAYb,GAC/B,OAEI,cAAC,IAAD,2BAAW6D,GAAX,IAAiBE,OAAQ,SAAAC,GAAK,OAC1BF,EACI,cAAC,IAAD,CAAUT,GAAIZ,IACZ,cAACkB,EAAD,eAAeK,S,UCFlB,SAASE,KACtB,OACE,cAAC,WAAD,CAAUC,SAAU,6CAApB,SACE,cAAC,IAAD,UACE,eAACC,GAAA,EAAD,CAAW/E,SAAS,KAAK+C,UAAU,YAAnC,UACE,cAAC,GAAD,CAAcwB,UAAWzB,EAAUkC,KAAM5B,EAAa6B,OAAK,IAC3D,cAAC,GAAD,CAAaD,KAAM5B,EAAqB6B,OAAK,EAACV,UAAWhB,IACzD,cAAC,GAAD,CAAayB,KAAM5B,EAAc6B,OAAK,EAACV,UAAWN,W,wCCXtD/C,GAAWgE,YAAc,IAAD,sBAC3BrH,EAAcsH,WAAY,SAACpH,EAAGmE,GAC7B,OAAOA,EAAOC,WAFY,gBAI3B7D,EAAW6G,WAAY,SAACvE,EAAD,OAAUuB,EAAV,EAAUA,QAAV,6BAA4BvB,GAA5B,CAAmCuB,OAJ/B,gBAK3BxD,EAAcwG,WAAY,SAACvE,EAAD,OAAUuB,EAAV,EAAUA,QAAV,OACzBvB,EAAMK,QAAO,qBAAGlE,KAAgBoF,QANN,KAQxBiD,GAAYF,aAAc,GAAD,sBAC5BrH,EAAcwH,SAAU,kBAAM,KADF,gBAE5BxH,EAAcsH,WAAY,kBAAM,KAFJ,gBAG5BtH,EAAcyH,UAAW,kBAAM,KAHH,gBAI5BhH,EAAW+G,SAAU,kBAAM,KAJC,gBAK5B/G,EAAW6G,WAAY,kBAAM,KALD,gBAM5B7G,EAAWgH,UAAW,kBAAM,KANA,KASzBpF,GAAQgF,YAAc,MAAD,sBACxBrH,EAAcyH,UAAW,SAACvH,EAAGmE,GAAJ,OAAeA,EAAOC,WADvB,gBAExBtE,EAAcwH,SAAU,kBAAM,QAFN,KAIdpE,GAASiE,YAAc,GAAD,gBAChCtI,GAAe,SAACmB,EAAD,YAAMoE,YAEToD,gBAAgB,CAC7BrE,YACAkE,aACAlF,W,iDC3BIsF,GAAgB,CACpBC,IAAK,OACLC,aACAC,UAAW,CAAC,OAAQ,QAAS,UAEzBC,GAAmBC,aAAeL,GAAeM,GAEhDC,GAAQC,YAAe,CAC5BC,QAAS,CACP9H,SAAU+H,GACVjF,UACCJ,KAAM+E,IAERO,WAAY,SAACC,GAAD,OAA0BA,IAAuBC,OAAOC,OACpEC,UAAUC,IAGPC,GAAYC,aAAaX,I,SCf/BY,IAASjC,OACP,cAAC,IAAMkC,WAAP,UACE,cAAC,IAAD,CAAUb,MAAOA,GAAjB,SACE,cAAC,KAAD,CAAac,QAAS,MAAOJ,UAAWA,GAAxC,SACA,cAAC,IAAD,UACE,cAAC,GAAD,YAKNK,SAASC,eAAe,U","file":"static/js/main.3b191ce7.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\"\n\nexport const changeFilter=createAction('contacts/changeFilter')\n\nexport const AddContactRequest=createAction('contacts/AddContactRequest')\nexport const addContactSuccess=createAction('contacts/addContactSuccess')\nexport const addContactError=createAction('contacts/addContactError')\n\nexport const deleteContactRequest=createAction('contacts/deleteContactRequest')\nexport const deleteContactSuccess=createAction('contacts/deleteContactSuccess')\nexport const deleteContactError=createAction('contacts/deleteContactError')","import React from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport {changeFilter} from \"redux/actions\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport default  function Filter (){\r\n  const id = uuidv4();\r\n  const dispatch=useDispatch()\r\n\r\n  return (\r\n    <>\r\n      <TextField id={id}\r\n        label=\"Filter via name\"\r\n       type=\"text\"  \r\n       onChange={(e)=>{\r\n         dispatch(changeFilter(e.target.value))\r\n       }} />\r\n    </>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   value: state.contacts.filter,\r\n\r\n// })\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onChange: (e) => dispatch(actions.changeFilter(e.target.value))\r\n// })\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import axios from 'axios';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit'\r\n// import { getisLoggedIn } from './selectors';\r\n\r\nconst URL = 'https://connections-api.herokuapp.com';\r\n// if (getisLoggedIn()) {\r\n//   const TOKEN = getisLoggedIn()\r\n\r\n//   axios.defaults.headers.common.Authorization = `Bearer ${TOKEN}`;\r\n// }\r\n\r\n  axios.defaults.baseURL = URL;\r\nexport const fetchContacts = createAsyncThunk(\r\n  'contacts/fetchContacts',\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const contacts = await axios.get('/contacts')\r\n      return contacts.data\r\n    } catch (error) {\r\n      return rejectWithValue(error.message)\r\n    }\r\n\r\n  }\r\n)\r\nexport const addContact = createAsyncThunk(\r\n  'contacts/addContact',\r\n  async ({ name, number }, { rejectWithValue }) => {\r\n    try {\r\n      const contact = await axios.post('/contacts', { name, number })\r\n      return contact.data\r\n    } catch (error) {\r\n      return rejectWithValue(error.message)\r\n    }\r\n  })\r\n\r\nexport const deleteContact = createAsyncThunk(\r\n  'contacts/deleteContact',\r\n  async (contactID, { rejectWithValue }) => {\r\n    try {\r\n      const contact = await axios.delete(`contacts/${contactID}`)\r\n      return contactID\r\n    } catch (error) {\r\n      return rejectWithValue(error.message)\r\n    }\r\n  }\r\n)\r\n\r\n// export const deleteContact=contactID=>dispatch=>{\r\n// dispatch(deleteContactRequest())\r\n// axios\r\n// .delete(`contacts/${contactID}`)\r\n// .then(()=>dispatch(deleteContactSuccess(contactID)))\r\n// .catch(error=>dispatch(deleteContactError(error.message)))\r\n// }","import React, { useState, useCallback } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addContact } from 'redux/operations'\r\nimport { Formik } from 'formik';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { useDispatch } from 'react-redux';\r\n\r\n\r\nconst INITIAL_VALUES = {\r\n  name: '',\r\n  number: ''\r\n}\r\n\r\nfunction Form({ onSubmit }) {\r\n  const dispatch = useDispatch()\r\n\r\n  const handleSubmit = (values, { setSubmitting }) => {\r\n    const { name, number } = values\r\n    onSubmit({ name, number })\r\n   }\r\n   \r\n   const validate = useCallback(\r\n     (values) => {\r\n       const errors = {};\r\n       if (!values.name) {\r\n         errors.name = 'Required🧐';\r\n       } else if (values.name.length < 2) {\r\n         errors.name = 'Invalid name😢';\r\n       }\r\n       if (!values.number) {\r\n         errors.number = 'Required🧐';\r\n       } else if (values.number.length < 7 || values.number.length > 15) {\r\n         errors.number = 'Invalid value, number should have  7-15 symbols😉';\r\n       }\r\n       return errors;\r\n     },\r\n     []\r\n   )\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={INITIAL_VALUES}\r\n      validate={validate}\r\n      onSubmit={handleSubmit}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        /* and other goodies */\r\n      }) => (\r\n        <form onSubmit={handleSubmit}>\r\n          <TextField\r\n            fullWidth\r\n            style={{ maxWidth: \"350px\" }}\r\n            id=\"name\"\r\n            name=\"name\"\r\n            label=\"Name\"\r\n            type=\"text\"\r\n            value={values.name}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={touched.name && Boolean(errors.name)}\r\n            helperText={touched.name && errors.name}\r\n          />\r\n          <br />\r\n          <TextField\r\n            fullWidth\r\n            style={{ maxWidth: \"350px\" }}\r\n            id=\"login\"\r\n            name=\"number\"\r\n            label=\"Number\"\r\n            type='number' \r\n            value={values.number}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={touched.number && Boolean(errors.number)}\r\n            helperText={touched.number && errors.number}\r\n          />\r\n          <br />\r\n          <br />\r\n\r\n          <Button color=\"primary\" variant=\"contained\" type=\"submit\" disabled={isSubmitting ||\r\n            !((\r\n              Object.keys(touched).length ===\r\n              Object.keys(INITIAL_VALUES).length\r\n            ) && Object.keys(errors).length === 0)}>\r\n            Add contact\r\n          </Button>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  )\r\n}\r\nconst mapDispatchToProrps = (dispatch) => ({\r\n  onSubmit: (obj) => dispatch(addContact(obj)),\r\n})\r\nexport default connect(null, mapDispatchToProrps)(Form)","import { createSelector } from \"reselect\"\r\n\r\nexport const getContacts = ({ contacts }) => contacts.entities\r\nexport const getFilter = ({ filter }) => filter\r\nexport const getisLoggedIn = state=> state.user.token\r\nexport const getToken = getisLoggedIn\r\n\r\nexport const getFilteredContacts = createSelector(\r\n    [getFilter, getContacts],\r\n    (filter, contacts) => {\r\n        if (filter) {\r\n            const normalizedFilter = filter.toLowerCase()\r\n            return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter))\r\n        }\r\n        return contacts\r\n    }\r\n)","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport {fetchContacts, deleteContact} from 'redux/operations'\r\nimport * as selectors from 'redux/selectors'\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nfunction ListContacts({onClick}) {\r\n   const dispatch = useDispatch()\r\n   useEffect(() => {\r\n    dispatch(fetchContacts())\r\n   }, [dispatch])\r\n\r\n   const contacts=useSelector(selectors.getFilteredContacts)\r\n\r\n  return (<ul>\r\n    {contacts.length>0 && contacts.map(({ id, name, number }) => (\r\n      <li key={id}>\r\n        {name} {number}\r\n        <button type=\"button\" id={id} onClick={(e)=>\r\n          onClick(e.target.id)\r\n          }>\r\n          delete\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>)\r\n}\r\n\r\n// ListContacts.propTypes = {\r\n//   contacts: PropTypes.oneOfType([\r\n//     PropTypes.string,\r\n//     PropTypes.number,\r\n//     PropTypes.array,\r\n//   ]),\r\n//   onClick: PropTypes.func.isRequired,\r\n// };\r\n\r\n\r\nconst mapDispatchToProrps = (dispatch) => ({\r\n  onClick: (id) => dispatch(deleteContact(id)),\r\n})\r\nexport default connect(null, mapDispatchToProrps)(ListContacts)\r\n","export const ACCOUNT_BASE_URL = 'https://connections-api.herokuapp.com';","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getisLoggedIn } from \"redux/selectors\";\r\n\r\nexport const INITIAL_STATE = {\r\n    name: \"\",\r\n    email: \"\",\r\n    token:\"\",\r\n    error:\"\",\r\n}\r\n\r\n\r\nexport const loginSlice = createSlice({\r\n    name: \"user\",\r\n    initialState: INITIAL_STATE,\r\n    reducers: {\r\n        registerSuccess: (state, action) => {\r\n            state.name = action.payload.name;\r\n            state.email = action.payload.email;\r\n            state.token = action.payload.token;\r\n        },\r\n        registerFailure: (state, action) => {\r\n            state.error=action.payload.error\r\n        },\r\n        loginSuccess: (state, action) => {\r\n            state.name = action.payload.name;\r\n            state.email = action.payload.email;\r\n            state.token = action.payload.token;\r\n        },\r\n        loginFailure: (state, action) => {\r\n            state.error = action.payload.error\r\n        },\r\n        logoutSuccess: (state, action) => {\r\n            state.user = '';\r\n            state.email = '';\r\n            state.token = '';\r\n            state.error = '';\r\n        },\r\n        logoutFailure: (state, action)=>{},\r\n    }\r\n})\r\n\r\nexport const {\r\n    registerSuccess,\r\n    registerFailure,\r\n    loginSuccess,\r\n    loginFailure,\r\n    logoutSuccess,\r\n    logoutFailure\r\n} = loginSlice.actions\r\n\r\nexport default loginSlice.reducer\r\n\r\n// {\r\n// \"user\": {\r\n//     \"name\": \"djmischa\",\r\n//         \"email\": \"djmischa@mail.com\"\r\n// },\r\n// \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MTZhYWE3MTNkYjY3YTAwMTVmMmM0N2IiLCJpYXQiOjE2MzQzODA0MDF9.JjutbE8YTB6yOpTQUOWvOVybdbGX5ayrb6E7P7mwoyY\"\r\n// }","import axios from \"axios\";\r\nimport { ACCOUNT_BASE_URL } from \"./API\";\r\nimport { getisLoggedIn } from \"redux/selectors\";\r\n\r\nimport {\r\n    registerSuccess,\r\n    registerFailure,\r\n    loginSuccess,\r\n    loginFailure,\r\n    logoutSuccess,\r\n    logoutFailure\r\n} from './slice'\r\n\r\nconst TOKEN = {\r\n    set(token) {\r\n        axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n    },\r\n    unset() {\r\n        axios.defaults.headers.common.Authorization = \"\";\r\n    },\r\n};\r\n\r\n\r\nexport function register(user) {\r\n    return function (dispatch) {\r\n        dispatch({ type: \"REGISTER_REQUEST\" })\r\n\r\n        return axios\r\n            .post(`${ACCOUNT_BASE_URL}/users/signup`, { ...user })\r\n            .then(function (response) {\r\n                const { user: { name, email }, token } = response.data\r\n                TOKEN.set(token);\r\n                dispatch(registerSuccess({ name, email, token }))\r\n            }).catch(function (error) { dispatch(registerFailure({ error: error.toString() })) })\r\n    }\r\n}\r\n\r\nexport function login(credentials) {\r\n    return function (dispatch) {\r\n        dispatch({ type: \"LOGIN_REQUEST\" })\r\n\r\n        return axios\r\n            .post(`${ACCOUNT_BASE_URL}/users/login`, {...credentials})\r\n            .then(function (response) {\r\n                const { user: { name, email }, token } = response.data\r\n                dispatch(loginSuccess({ name, email, token }))\r\n                TOKEN.set(response.data.token);\r\n                console.log(axios.defaults.headers.common.Authorization);\r\n            }).catch(function (error) { dispatch(loginFailure({ error: error.toString() })) })\r\n    }\r\n}\r\n\r\nexport function logout(token) {\r\n    return function (dispatch) {\r\n        dispatch({ type: \"LOGOUT_REQUEST\" })\r\n\r\n        return axios\r\n            .post(`${ACCOUNT_BASE_URL}/users/logout`, token)\r\n            .then(function (response) {\r\n                dispatch(logoutSuccess(response.data))\r\n                TOKEN.unset();\r\n            }).catch(function (error) { dispatch(logoutFailure({ error: error.toString() })) })\r\n    }\r\n}","import Filter from \"./Filter/Filter\";\r\nimport Form from \"./Form/Form\";\r\nimport ListContacts from \"./ListContacts/ListContacts\";\r\nimport { useCallback } from \"react\";\r\nimport { logout } from 'components/login/thunk'\r\nimport { useDispatch } from \"react-redux\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\n\r\nexport default function UserPage() {\r\n    const dispatch = useDispatch()\r\n    return (\r\n        < div className=\"App\" >\r\n            <h3>Phonebook</h3>\r\n            <Form />\r\n            <Button variant=\"outlined\" color=\"red\" onClick={() => {\r\n                dispatch(logout())\r\n            }}>Logout</Button>\r\n            <br />\r\n            <Filter />\r\n            <h3>Contacts</h3>\r\n            <ListContacts />\r\n\r\n        </div >)\r\n}","const routes = {\r\n    home: '/goit-react-hw-08-phonebook',\r\n    registration: '/registration',\r\n    login: '/login'\r\n}\r\n\r\nexport {routes}","import React, { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport { useCallback } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { routes } from 'utils/routes';\r\nimport { useDispatch } from 'react-redux';\r\nimport { register } from '../thunk';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst INITIAL_VALUES = {\r\n    name: '',\r\n    email: '',\r\n    passwrod: '',\r\n    confirmPassword: '',\r\n}\r\n\r\n\r\nconst Registration = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const [showPassword, setshowPassword] = useState(false)\r\n    const togglePassword = useCallback(() => {\r\n        setshowPassword(prev => !prev)\r\n    }, [])\r\n    const validate = useCallback(\r\n        (values) => {\r\n            const errors = {};\r\n\r\n            if (!values.name) {\r\n                errors.name = 'Required🧐';\r\n            } else if (values.name.length < 2) {\r\n                errors.name = 'Invalid name😢';\r\n            }\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Required🧐';\r\n            } else if (\r\n                !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n            ) {\r\n                errors.email = 'Invalid email address😢';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required🧐';\r\n            } else if (values.password.length < 7 || values.password.length > 15) {\r\n                errors.password = 'Invalid value, password should have  7-15 symbols😉';\r\n            }\r\n\r\n            if (!values.confirmPassword) {\r\n                errors.confirmPassword = 'Required🧐';\r\n            } else if (values.confirmPassword.length < 7 || values.confirmPassword.length > 15) {\r\n                errors.confirmPassword = 'Invalid value, password should have  7-15 symbols😉';\r\n            } else if (values.confirmPassword !== values.password) {\r\n                errors.confirmPassword = 'Passwords do not match😢';\r\n            }\r\n            return errors;\r\n        },\r\n        []\r\n    )\r\n\r\n    const handleSubmit = useCallback(\r\n        (values, { setSubmitting }) => {\r\n            const { name, email, password } = values\r\n            dispatch(register({ name, email, password }))\r\n            setSubmitting(false)\r\n        },\r\n        [dispatch]\r\n    )\r\n\r\n    return (\r\n        < div >\r\n            <h1>Registration Form</h1>\r\n            <Formik\r\n                initialValues={INITIAL_VALUES}\r\n                validate={validate}\r\n                onSubmit={handleSubmit}\r\n            >\r\n                {({ isSubmitting, errors, touched, handleChange, handleBlur, values }) => (\r\n                    <Form>\r\n                        <TextField\r\n                            style={{ maxWidth: \"350px\" }}\r\n                            fullWidth\r\n                            id=\"name\"\r\n                            name=\"name\"\r\n                            label=\"Name\"\r\n                            type=\"name\"\r\n                            value={values.name}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={touched.name && Boolean(errors.name)}\r\n                            helperText={touched.name && errors.name}\r\n                        />\r\n                        <br />\r\n                        <TextField\r\n                            style={{ maxWidth: \"350px\" }}\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            label=\"Email\"\r\n                            type=\"email\"\r\n                            value={values.email}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={touched.email && Boolean(errors.email)}\r\n                            helperText={touched.email && errors.email}\r\n                        />\r\n                        <br />\r\n                        <TextField\r\n                            style={{ maxWidth: \"350px\" }}\r\n                            fullWidth\r\n                            id=\"password\"\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            type={showPassword ? 'text' : 'password'}\r\n                            value={values.password}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={touched.password && Boolean(errors.password)}\r\n                            helperText={touched.password && errors.password}\r\n                        />\r\n                        <br />\r\n                        <br />\r\n                        <TextField\r\n                            style={{ maxWidth: \"350px\" }}\r\n                            fullWidth\r\n                            maxWidth=\"50px\"\r\n                            id=\"password\"\r\n                            name=\"confirmPassword\"\r\n                            label=\"Confirm Password\"\r\n                            type={showPassword ? 'text' : 'password'}\r\n                            value={values.confirmPassword}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={touched.confirmPassword && Boolean(errors.confirmPassword)}\r\n                            helperText={touched.confirmPassword && errors.confirmPassword}\r\n\r\n                        />\r\n                        <Button color=\"success\" size=\"small\" onClick={togglePassword}>{showPassword ? 'Hide password' : 'Show password'}</Button>\r\n                        <br />\r\n                        <br />\r\n                        <Button color=\"primary\" variant=\"contained\" type=\"submit\" disabled={isSubmitting ||\r\n                            !((\r\n                                Object.keys(touched).length ===\r\n                                Object.keys(INITIAL_VALUES).length\r\n                            ) && Object.keys(errors).length === 0)}>\r\n                            Submit\r\n                        </Button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n            <Link to={routes.login}>Have an account? Login here!</Link>\r\n        </div >)\r\n\r\n}\r\n\r\nexport { Registration }","import React, { useCallback, useState } from 'react';\r\nimport { Formik} from 'formik';\r\nimport { routes } from 'utils/routes';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { useDispatch } from 'react-redux';\r\nimport { login } from '../thunk';\r\n\r\nconst INITIAL_VALUES = {\r\n    email: '',\r\n    password: ''\r\n}\r\n\r\n\r\nconst Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const [showPassword, setshowPassword] = useState(false)\r\n    const togglePassword = useCallback(() => {\r\n        setshowPassword(prev => !prev)\r\n    }, [])\r\n    const validate = useCallback(\r\n        (values) => {\r\n            const errors = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required🧐';\r\n            } else if (\r\n                !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n            ) {\r\n                errors.email = 'Invalid email address😢';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required🧐';\r\n            } else if (values.password.length < 7 || values.password.length > 15) {\r\n                errors.password = 'Invalid value, password should have  7-15 symbols😉';\r\n            }\r\n            return errors;\r\n        },\r\n        []\r\n    )\r\n\r\n    const handleSubmit = useCallback(\r\n        (values, { setSubmitting }) => {\r\n            const {email, password } = values\r\n            dispatch(login({ email, password }))\r\n            setSubmitting(false)\r\n        },\r\n        [dispatch]\r\n    )\r\n\r\n    return (\r\n        < div >\r\n            <h1>Login Form</h1>\r\n            <Formik\r\n                initialValues={INITIAL_VALUES}\r\n                validate={validate}\r\n                onSubmit={handleSubmit}\r\n            >\r\n                {({\r\n                    values,\r\n                    errors,\r\n                    touched,\r\n                    handleChange,\r\n                    handleBlur,\r\n                    handleSubmit,\r\n                    isSubmitting,\r\n                    /* and other goodies */\r\n                }) => (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <TextField\r\n                            fullWidth\r\n                            style={{ maxWidth: \"350px\" }}\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            label=\"Email\"\r\n                            type=\"email\"\r\n                            value={values.email}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={touched.email && Boolean(errors.email)}\r\n                            helperText={touched.email && errors.email}\r\n                        />\r\n                        <br />\r\n                        <TextField\r\n                            fullWidth\r\n                            style={{ maxWidth: \"350px\" }}\r\n                            id=\"login\"\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            type={showPassword ? 'text' : 'password'}\r\n                            value={values.password}\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            error={touched.password && Boolean(errors.password)}\r\n                            helperText={touched.password && errors.password}\r\n                        />\r\n                        <Button color=\"success\" size=\"small\" onClick={togglePassword}>{showPassword ? 'Hide password' : 'Show password'}</Button>\r\n                        <br />\r\n                        <br />\r\n\r\n                        <Button color=\"primary\" variant=\"contained\"  type=\"submit\" disabled={isSubmitting ||\r\n                            !((\r\n                                Object.keys(touched).length ===\r\n                                Object.keys(INITIAL_VALUES).length\r\n                            ) && Object.keys(errors).length === 0)}>\r\n                            Submit\r\n                        </Button>\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n            <br />\r\n            <Link to={routes.registration}>Do not have account? Register here!</Link>\r\n        </div >)\r\n\r\n}\r\n\r\nexport { Login }","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { getisLoggedIn } from 'redux/selectors';\r\nimport {routes} from 'utils/routes'\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n    const isLoggedIn = useSelector(getisLoggedIn)\r\n    return (\r\n        <Route {...rest} render={props => (\r\n            isLoggedIn ?\r\n                <Component {...props} />\r\n                : <Redirect to={routes.registration} />\r\n        )} />\r\n    );\r\n};\r\n\r\nexport default PrivateRoute;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { getisLoggedIn } from 'redux/selectors';\r\nimport { routes } from 'utils/routes'\r\n\r\nconst PublicRoute = ({ component: Component, ...rest }) => {\r\n    const isLoggedIn = useSelector(getisLoggedIn)\r\n    return (\r\n\r\n        <Route {...rest} render={props => (\r\n            isLoggedIn ?\r\n                <Redirect to={routes.home} />\r\n                : <Component {...props} />\r\n        )} />\r\n    );\r\n};\r\n\r\nexport default PublicRoute;","import \"./App.css\";\r\nimport React, { useState, useEffect, Suspense } from \"react\";\r\nimport UserPage from \"components/UserPage\";\r\nimport { routes } from \"utils/routes\";\r\nimport { Registration } from '../src/components/login/components/Registration'\r\nimport { Login } from '../src/components/login/components/Login'\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport PrivateRoute from \"components/PrivateRoute\";\r\nimport PublicRoute from \"components/PublicRoute\";\r\nimport Container from '@material-ui/core/Container';\r\n\r\nexport default function App() {\r\n  return (\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <Switch>\r\n        <Container maxWidth=\"sm\" className='Container'>\r\n          <PrivateRoute component={UserPage} path={routes.home} exact />\r\n          <PublicRoute path={routes.registration} exact component={Registration} />\r\n          <PublicRoute path={routes.login} exact component={Login} />\r\n        </Container>\r\n      </Switch>\r\n    </Suspense>\r\n\r\n  )\r\n}\r\n\r\n","import { combineReducers } from 'redux'\r\nimport { createReducer } from '@reduxjs/toolkit'\r\nimport { fetchContacts } from './operations'\r\nimport { changeFilter } from './actions'\r\nimport { addContact, deleteContact } from './operations'\r\nimport userReducer from 'components/login/slice'\r\n\r\nconst entities = createReducer([], {\r\n  [fetchContacts.fulfilled]: (_, action) => {\r\n    return action.payload\r\n  },\r\n  [addContact.fulfilled]: (state, { payload }) => [...state, payload],\r\n  [deleteContact.fulfilled]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n})\r\nconst isLoading = createReducer(false, {\r\n  [fetchContacts.pending]: () => true,\r\n  [fetchContacts.fulfilled]: () => false,\r\n  [fetchContacts.rejected]: () => false,\r\n  [addContact.pending]: () => true,\r\n  [addContact.fulfilled]: () => false,\r\n  [addContact.rejected]: () => false,\r\n})\r\n\r\nconst error = createReducer(null, {\r\n  [fetchContacts.rejected]: (_, action) => action.payload,\r\n  [fetchContacts.pending]: () => null,\r\n})\r\nexport const filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n})\r\nexport default combineReducers({\r\n  entities,\r\n  isLoading,\r\n  error,\r\n})\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport contactsReducer, { filter } from './reducer'\r\nimport userReducer from 'components/login/slice'\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport logger from \"redux-logger\";\r\n\r\nconst persistConfig = {\r\n  key: \"auth\",\r\n  storage,\r\n  whitelist: [\"name\", \"email\", \"token\"],\r\n};\r\nconst persistedReducer = persistReducer(persistConfig, userReducer);\r\n\r\n const store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n    filter,\r\n     user: persistedReducer\r\n   },\r\n   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\r\n   devTools: process.env.NODE_ENV === \"development\",\r\n})\r\n\r\nconst persistor = persistStore(store);\r\nexport { store, persistor };","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport { Provider } from \"react-redux\";\nimport { store, persistor } from \"./redux/store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={'...'} persistor={persistor}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}